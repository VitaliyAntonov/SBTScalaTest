



import scala.collection.mutable.ListBuffer

/** Определяет путь и содержимое папки */
trait Folder {
  /** Полный путь к папке */
  val fullPathName: String
  /** Флаг наличия дирректории - если папка существует = True */
  val pathOK: Boolean
  /** Список вложенных дирректорий */
  val inFoldersNames: List[String]
  /** Список вложенных файлов */
  val inFilesNames: List[String]

  /** Отладочные методы */
  def show: Unit = {
    if(pathOK){
      println("Директория :   " + fullPathName)
      showFoldersNames
      showFilesNames
    }
    else println("Error Path")
  }

  def showFoldersNames: Unit = {
    print("Список папок : ")
    if(inFoldersNames.nonEmpty){
      println()
      for(i <- inFoldersNames) println(i)}
    else println("No folders in directory")
  }

  def showFilesNames: Unit = {
    print("Список файлов : ")
    if(inFilesNames.nonEmpty){
      println()
      for(i <- inFilesNames) println(i)}
    else println("No files in directory")
  }

}

/** Индексирование вложенных файлов и папок
 * корневой класс */
abstract class Iif extends Folder

/** Создание индексов папки */
class IndexFolder(path: String) extends Iif{

  val (fullPathName, pathOK, inFoldersNames, inFilesNames) = indexer(path)

//  def this(path: String) = {    /** Дополнительный конструктор */
//    this(path)
//  }

  /** Проверка наличия директории и создание списков */
  private def indexer(path: String): (String, Boolean, List[String],List[String]) = {
    val pathTab = new java.io.File(path) // Таблица вложенных
    var fullPathName = path // полный путь к директории
    val pathYes = pathOK(pathTab) // Флаг наличия дирректории
    val inFoldersNames = ListBuffer[String]() // Список вложенных папок
    val inFilesNames = ListBuffer[String]() // Список вложенных файлов
    if(pathYes){
      fullPathName = pathTab.getCanonicalPath // При наличии директории читаем полное имя пути
      for (i ← pathTab.listFiles){
        if(i.isDirectory) inFoldersNames += i.getName // Заполняем список папок
        if(i.isFile) inFilesNames += i.getName // Заполняем список файлов
      }
      (fullPathName, pathYes, inFoldersNames.toList, inFilesNames.toList)
    }
    else (fullPathName, pathYes, List.empty, List.empty)
  }

  private def pathOK(pathTab: java.io.File): Boolean = {
    if(pathTab.isDirectory) true
    else false
  }

}

/** Проверка объекта - компаньона */
object IndexFolder{
  /** метод apply даёт возможность упрощённого создания объекта
   * без слова new */
  def apply(path:String): (String, Boolean, List[String],List[String]) ={
    IndexFolder(path)
  }
}


object testIndexFolder{
  val t1_ns: Long = System.nanoTime()  // Измерение времени в наносекундах
  val nf = new IndexFolder(".")
  val duration: Long = (System.nanoTime() - t1_ns)/1000


  nf.show

  val nf1: Folder = nf
  println(nf1.inFoldersNames.mkString(" "))

  println("время создания списков :  " + duration + " микросекунд")


}






