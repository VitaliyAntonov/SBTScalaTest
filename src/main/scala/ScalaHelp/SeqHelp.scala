package ScalaHelp



/** Описание методов для работы с последовательностями Seq */
object SeqHelp {
  /** Scala - профессиональное программирование. Таблица 24.3 - Операции в трейте Seq */

  /** xs.apply(x)  - возвращает элемент из xs с индексом x */
  def apply_help = {}

  /** xs.isDefinedAt(x) - Boolean, определяет содержится ли индекс x в xs (0 <= x < xs.length) */
  def isDefinedAt_help = {}

  /** xs.length  - Int, возвращает количество элементов в последовательности xs */
  def length_help = {}

  /** xs.indices  - возвращает диапазон индексов от 0 до xs.length - 1 */
  def indices_help = {}

  /** xs.lengthCompare(x: Int) - Возвращает
   * –1, если xs короче x,
   * +1, если последовательность длиннее x, и
   *  0, если длина xs = x */
  def lengthCompare_help = {}

  // Поиск индекса
  /** xs.indexOf(x) - Возвращает индекс первого элемента в xs, равного значению x */
  def indexOf_help = {}

  /** xs.lastIndexOf(x) - Возвращает индекс последнего элемента в xs, равного значению x */
  def lastIndexOf_help = {}

  /** xs.indexOfSlice(ys) - Возвращает первый индекс xs при условии,
   * что следующие друг за другом элементы, начинающиеся с элемента с этим индексом,
   * составляют последовательность ys. */
  def indexOfSlice_help = {}

  /** xs.lastIndexOfSlice(ys) - Возвращает последний индекс xs при условии,
   * что следующие друг за другом элементы, начинающиеся с элемента с этим индексом,
   * составляют последовательность ys. */
  def lastIndexOfSlice_help = {}

  /** xs.indexWhere(p) - Возвращает индекс первого элемента в xs, удовлетворяющего условию p */
  def indexWhere_help = {}

  /** xs.segmentLength(p, i) - Возвращает длину самого длинного непрерывного
   * сегмента элементов в xs, начинающегося с xs(i), который удовлетворяет условию p */
  def segmentLength_help = {}

  /** xs.prefixLength(p) - Возвращает длину самого длинного префикса элементов в xs,
   * все элементы которого удовлетворяют условию p */
  def prefixLength_help = {}

  // Добавления
  /** x +: xs  - Создает новую последовательность со значением x, добавленным в начало xs.
   *
   *  xs :+ x  - Создает новую последовательность со значением x, добавленным в конец xs.
   *
   *  xs.padTo(len, x) - Создает последовательность, получающуюся из добавления значения x к xs,
   *  до тех пор, пока длина не достигнет значения len */
  def addFunctions_help = {}

  // Обновления
  /** xs.patch(i, ys, r)  - Создает последовательность, получающуюся заменой r элементов
   *  последовательности xs, начиная с i, элементами последовательности ys. */
  def patch_help = {}

  /** xs.updated(i, x)  - Создает копию xs, в которой элемент с индексом i заменяется значением x. */
  def updated_help = {}

  /** xs(i) = x  - Изменяет значение элемента xs с индексом i на значение x */
  def setValue = {}

  // Сортировки
  /** xs.sorted  - Создает новую последовательность путем сортировки элементов xs
   * с использованием стандартного порядка следования элементов типа, хранящегося в xs. */
  def sorted_help = {}

  /** xs.sortWith(lessThan)  -  Создает новую последовательность путем сортировки
   * элементов xs с использованием в качестве операции сравнения lessThan (меньше чем). */
  def sortWith_help = {}

  /** xs.sortBy(f)  -  Создает новую последовательность путем сортировки элементов xs.
   * Сравнение двух элементов выполняется путем применения к ним функции f и сравнения результатов */
  def sortBy_help = {}

  // Реверсирования
  /** xs.reverse  -  Создает последовательность из элементов xs, следующих в обратном порядке */
  def reverse_help = {}

  /** xs.reverseIterator  -  Создает итератор, выдающий все элементы xs в обратном порядке. */
  def reverseIterator = {}

  /** xs.reverseMap(f)  -  Создает последовательность, получаемую путем применения
   * функции f к элементам xs, стоящим в обратном порядке  */
  def reverseMap_help = {}

  // Сравнения
  /** xs.startsWith(ys)  -  Проверяет, не начинается ли xs с последовательности ys
   * (имеется несколько вариантов).  */
  def startsWith_help = {}

  /** xs.endsWith(ys)  -  Проверяет, не заканчивается ли xs последовательностью ys
   * (имеется несколько вариантов). */
  def endsWith_help = {}

  /** xs.contains(x)  -  Проверяет, имеется ли в xs элемент, равный x. */
  def contains_help = {}

  /** xs.containsSlice(ys)  -  Проверяет, имеется ли в xs непрерывная последовательность, равная ys. */
  def containsSlice_help = {}

  /** xs.corresponds(ys)(p)  -  Проверяет, имеются ли в xs и ys элементы,
   * удовлетворяющие бинарному предикату p  */
  def corresponds_help = {
    val a = List(1, 2, 3, 4)
    val b = List((1,4), (2,5), (3,7), (3,11))

    val cmp =
      (k: Int, v: (Int, Int)) => {
        val (start, end) = v
        k >= start && k < end
      }
    a.corresponds(b)(cmp)
    // Boolean = true
  }

  // Операции над множествами
  /** xs.intersect(ys)  -  Выдает результат пересечения множеств,
   * состоящих из последовательностей xs и ys, придерживаясь порядка следования элементов в xs. */
  def intersect_help = {}

  /** xs.union(ys)  -  Выдает результат объединения множеств (то же самое, что и xs ++ ys). */
  def union_help = {}

  /** xs.distinct  -  Выдает часть последовательности xs, не содержащую продублированных элементов */
  def distinct_help = {}


}


/** Описание методов для работы с последовательностями Buffer (ListBuffer, ArrayBuffer) */
object BufferHelp{
  // Добавления
  /** buf += x  -  Добавляет элемент x к буферу buf и возвращает в качестве результата сам buf.
   *
   * buf += (x, y, z)  -  Добавляет к буферу указанные элементы.
   *
   * buf ++= xs  -  Добавляет к буферу все элементы, имеющиеся в xs.
   *
   * x +=: buf  -  Добавляет элемент x в начало буфера.
   *
   * xs ++=: buf  -  Добавляет в начало буфера все элементы, имеющиеся в xs. */
  def add_help = {}

  /** buf.insert(i, x)  -  Вставляет элемент x в то место в буфере, на которое указывает индекс i. */
  def insert_help = {}

  /** buf.insertAll(i, xs)  -  Вставляет все элементы, имеющиеся в xs, в то место в буфере,
   * на которое указывает индекс i */
  def insertAll_help = {}

  // Удаления
  /** buf -= x  -  Удаляет из буфера элемент x.  */
  def delete_help = {}

  /** buf.remove(i)  -  Удаляет из буфера элемент с индексом i.
   *
   * buf.remove(i, n)  -  Удаляет из буфера n элементов, начиная с элемента с индексом i  */
  def remove_help = {}

  /** buf.trimStart(n)  -  Удаляет из буфера первые n элементов. */
  def trimStart_help = {}

  /** buf.trimEnd(n)  -  Удаляет из буфера последние n элементов. */
  def trimEnd_help = {}

  /** buf.clear()  -  Удаляет из буфера все элементы  */
  def clear_help = {}

  // Клонирование
  /** buf.clone  -  Создает новый буфер с теми же элементами, что и в buf */
  def clone_help = {}



}


