
/** ==================================================================================== */
/** topic <List> methods */

/** val abcde = List("a","b","c","d","e")  Объявление списка */

/** Основные операции, проводимые над списками */
/** <::>        добавить элемент в начало списка */
/** <head>      возвращает первый элемент списка */
/** <tail>      возвращает список, состоящий из всех элементов, за исключением первого */
/** <isEmpty>   возвращает true, если список пуст */
/**  Методы head и tail определены только для непустых списков */

/** Методы первого порядка, определенные в классе List */
/** <:::>       объединение двух списков */
/** <length>    получение длины списка */
/** <last>      возвращает последний элемент непустого списка */
/** <init>      список, состоящий из всех элементов, за исключением последнего */
/** <reverse>   реверсирование списков */

/** Префиксы и суфиксы */
/** <take>      Выражение xs take n возвращает первые n элементов списка xs */
/** <drop>      xs drop n возвращает все элементы списка xs, за исключением первых n элементов */
/** <splitAt>   разбивает список по заданному индексу, возвращая пару из двух списков */

/** Выбор элемента */
/** <apply>     возвращает элемент с указанным индексом (большое время на длинных списках) */
/** <indices>   возвращает список, состоящий из всех допустимых индексов заданного списка */

/** Линеаризация списка списков: flatten */
/** <flatten>   получает список списков и линеаризирует его в единый список */

/** Объединение в пары и обратное разбиение */
/** <zip>       получает два списка и формирует список из пар их значений */
/** <zipWithIndex>  составляет пары из элементов списка и той позиции, в которой они расположены */
/** <unzip>     список кортежей преобразуется обратно в кортеж списков */

/** Отображение списков */
/** <toString>  возвращает каноническое строковое представление списка */
/** <mkString>  mkString (pre, sep, post) преобразует List в строку из всех элементов списка */
/** <addString> добавляют созданную строку к объекту StringBuilder */

/** Преобразование списков */
/** <toArray>   Преобразование в массив */
/** <copyToArray> xs copyToArray(arr, start) из списка xs в массив arr, начиная с позиции start */
/** <iterator>  val it = abcde.iterator; it.next  доступ к элементам списка через итератор*/

/** сортировка методом слияния */

// topic 16.7. Методы высшего порядка, определенные в классе List
/** <map>       xs map f получает в качестве операндов список xs типа
                List[T] и функцию f типа T => U. Она возвращает список,
                получающийся в результате применения f к каждому элементу списка xs
                пример:  List(1, 2, 3) map (_ + 1) */
/** <flatMap>   похож на map, но в качестве правого
                операнда получает функцию, возвращающую список элементов. Он
                применяет функцию к каждому элементу списка и возвращает
                объединение всех результатов выполнения функции. */
/** <foreach>   получает в качестве
                правого операнда процедуру (функцию, результатом которой
                является тип Unit). Она просто применяет процедуру к каждому
                элементу списка. А сам результат операции также имеет тип Unit */
/** <range>     является вспомогательным методом, создающим
                список из всех целых чисел в некотором диапазоне */
// topic Фильтрация списков
/** <filter>    Операция xs filter p получает в качестве операндов список xs
                типа List[T] и функцию-предикат p, относящуюся к типу T =>
                Boolean. Эта операция выдает список всех элементов x из списка
                xs, для которых p(x) вычисляется в true */
/**  <partition> похож на метод filter, но возвращает пару
                списков. Один список содержит все элементы, для которых
                предикат вычисляется в true, а другой — все элементы, для
                которых предикат вычисляется в false */
/** <find>      также похож на метод filter, но возвращает только первый
                элемент, удовлетворяющий условию заданного предиката */
/** <takeWhile >  Операция xs takeWhile p получает самый длинный префикс списка xs,
                в котором каждый элемент удовлетворяет условию предиката p */





















